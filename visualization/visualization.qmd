---
title: "Results visualization"
subtitle: "Paper UMAPs, density plots, boxplots, statplots generation"
author: "Petr Tsurinov"
date: "01/26/2024"
date-format: long
format: html
lightbox:
  match: auto
  effect: zoom
  desc-position: right
  loop: true
    
knitr:
  opts_chunk: 
    collapse: true
    
execute:
  freeze: auto  # re-render only when source changes
---

## Loading libraries, defining constants and loading files

Loading required libraries/functions

```{r}
#| label: library-load

library(CATALYST)
library(stringr)
library(ggplot2)
library(dplyr)
library("rasterpdf")
library(minpack.lm)
library(ggrastr)
library(ggpubr)
library(FSA)
library(reshape2)
library(tidyr)
source("../utility_functions.R")
```

Defining paths and constants, loading input files

```{r}
#| label: constants-define

input_dir <- "../input_data/"
intermediate_dir <- "../input_data/Intermediate_Pipeline_Files/"
feature_column_indexes <- 4:46
s_cols_grad <- c("#93cf92", "#87b2d4", "#ef7577", "#c195c8", "#ffb266", "#ffffff")
expression_selected_features <- c("CxCR3", "CD38", "CD25", "CD3", "CD8", "CD4", "gdTCR", "TRAV2", "CD127", "CCR7", "CD45RA", "Fas", "PTK7")
threshold_selected_features <- c("CxCR3", "CD38", "CD25", "PTK7")
join_selected_features <- c("CxCR3", "CD38", "CD25")
thresholds_coef <- list("CD8" = list("CxCR3" = 1.2, "CD38" = 2.1, "CD25" = 0.68, "PTK7" = 0.85), 
                        "CD4" = list("CxCR3" = 0.7, "CD38" = 2.8, "CD25" = 0.7, "PTK7" = 0.85))

comparisons <- list(c("A", "E"))

age_group_map <- list("A" = "A", "G" = "A", "M" = "A", "FA" = "A", "FG" = "A", "B" = "B", "H" = "B", "N" = "B", "FB" = "B", "FH" = "B", "C" = "C", "J" = "C", "P" = "C", "FC" = "C", "FJ" = "C", "D" = "D", "K" = "D", "S" = "D", "FD" = "D", "FK" = "D", "E" = "E", "L" = "E", "T" = "E", "FE" = "E", "FL" = "E")

donors_info <- read.table(paste0(input_dir, "Samples_Metadata_for_pipeline.csv"), sep = ";", dec = ",", header=TRUE)
donors_info <- donors_info[c("Tube.ID", "Donor.ID", "Age")]

features_max_df <- read.table(paste0(intermediate_dir, "features_max.csv"), sep = ";")
features_max <- as.list(setNames(features_max_df[[2]], features_max_df[[1]]))

cd8_naive <- read.table(paste0(intermediate_dir, "Expression_and_metadata_CD8_naive_cells_not_quantile_normalized.csv"), sep = ";", header = TRUE)
cd4_naive <- read.table(paste0(intermediate_dir, "Expression_and_metadata_CD4_naive_no_Tregs_not_quantile_normalized.csv"), sep = ";", header = TRUE)

cd8_naive_qnormed <- read.table(paste0(intermediate_dir, "Expression_and_metadata_CD8_naive_cells_6_cluster_marker_quantile_normalized.csv"), sep = ";", header = TRUE)
cd4_naive_qnormed <- read.table(paste0(intermediate_dir, "Expression_and_metadata_CD4_naive_no_Tregs_6_cluster_markers_quantile_normalized.csv"), sep = ";", header = TRUE)

n_cells_CD8 <- read.table(paste0(intermediate_dir, "n.cells_CD8.csv"), sep = ";", header = TRUE)
n_cells_CD4 <- read.table(paste0(intermediate_dir, "n.cells_CD4.csv"), sep = ";", header = TRUE)

cells_df_list <- list("CD8" = cd8_naive, "CD4" = cd4_naive)
cells_df_qnormed_list <- list("CD8" = cd8_naive_qnormed, "CD4" = cd4_naive_qnormed)
n_cells_all_cells_list <- list("CD8" = n_cells_CD8, "CD4" = n_cells_CD4)
```

## Constructing age groups density plots

```{r fig.height=6, fig.width=10}
#| label: agegroup-densities-plot

rownames(donors_info) <- donors_info$Tube.ID
donors_info <- donors_info[-1]
donors_info$age_group <- str_replace(str_replace(donors_info$Donor.ID, "\\d+", ""), "F", "")

age_group_labels <- c()
age_groups_count <- table(donors_info$age_group)
for(age_group in c("A", "B", "C", "D", "E")) {
  age_group_labels <- c(age_group_labels, paste0(age_group, " (", age_groups_count[[age_group]], " samples)"))
}

ggplot(donors_info %>% arrange(donors_info[["age_group"]]), aes(x=Age, fill=age_group, color=age_group)) +
  geom_density(alpha=0.8) +
  scale_fill_manual(values=s_cols_grad, labels = age_group_labels) +
  scale_color_manual(values=s_cols_grad, labels = age_group_labels) + 
  scale_x_continuous(breaks = seq(25, 80, by = 5)) +
  xlab("Age (years)") +
  labs(fill = "Age group", color = "Age group") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                  panel.background = element_blank(), axis.line = element_line(colour = "black"), 
                  text = element_text(size = 8))
```

## Visualization of UMAPs expression for selected features and threshold densities plots creation

```{r fig.height=6, fig.width=8}
#| label: expression-UMAPs-and-thresholds
#| output-location: slide
#| lightbox:
#|   group: expression-UMAPs-and-thresholds
#| layout: [[1,1,1], [1,1,1], [1,1,1], [1,1,1], [1,1,1], [1,1,-1], [1,1,1], [1,1,1], [1,1,1], [1,1,1], [1,1,1], [1,1,-1]]

for(cell_type in names(cells_df_list)) {
  cells_df <- cells_df_list[[cell_type]]
  cells_df_qnormed <- cells_df_qnormed_list[[cell_type]]
  feature_names <- colnames(cells_df_qnormed)[feature_column_indexes]
  
  sce <- SingleCellExperiment(list(counts=t(cells_df_qnormed[feature_names])))
  sce@int_colData@listData$reducedDims$UMAP <- as.matrix(cells_df_qnormed[c("UMAP1", "UMAP2")])
  
  temp_expression <- cells_df_qnormed
  temp_expression[feature_column_indexes][temp_expression[feature_column_indexes] < 0] <- 0
  
  for(feature in expression_selected_features) {
    feature_max <- features_max[[feature]]
    
    temp_expression[[feature]] <- pmin(feature_max, temp_expression[[feature]])
    sce@assays@data$exprs <- t(temp_expression[feature_names])
    
    plot <- plotDR_2(sce, "UMAP", color_by = feature, scale = FALSE, 
                   a_pal = rev(hcl.colors(3, "Spectral")), color_range = c(0, feature_max), 
                   used_in_clustering = paste("expression in", cell_type, "Naive cells")) + 
            theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
                  panel.background = element_blank(), axis.line = element_line(colour = "black"), 
                  text = element_text(size = 25))
    
    print(rasterize(plot, layers='Point', dpi=150))
  }
  
  cells_df$cell_subtype <- "Mature"
  cells_df_qnormed$cell_subtype <- "Mature"
  
  for(feature in rev(threshold_selected_features)) {
    if(feature %in% join_selected_features) {
      cells_df[cells_df[feature] > thresholds_coef[[cell_type]][[feature]], "cell_subtype"] <- paste0(feature, "+")
      cells_df_qnormed[cells_df_qnormed[feature] > thresholds_coef[[cell_type]][[feature]], "cell_subtype"] <- paste0(feature, "+")
    }
    
    print(ggplot(data = cells_df, aes_string(feature))+
        ggtitle(paste(feature, "threshold in", cell_type, "Naive cells") ) +
        geom_density(alpha = 0.8) +
        geom_text(x=thresholds_coef[[cell_type]][[feature]], y=0.5, label=paste("Threshold:", format(round(thresholds_coef[[cell_type]][[feature]], 2), nsmall = 2)), 
                  check_overlap = TRUE) +
        geom_vline(xintercept = thresholds_coef[[cell_type]][[feature]],linetype="dashed") +
        xlab(feature)+
        theme_bw() )
  }
  
  cells_df_list[[cell_type]] <- cells_df
  cells_df_qnormed_list[[cell_type]] <- cells_df_qnormed
}
```

## UMAPs with cells subtypes visualization

```{r fig.height=5.5, fig.width=7}
#| label: cell-subtypes-UMAPs
#| layout: [[1,1,1], [1,1,-1], [1,1,1], [1,1,-1]]
#| lightbox:
#|   group: cell-subtypes-UMAPs

legend_titles <- list("CxCR3" = "CxCR3 high", "CD38" = "CD38 high  ", "CD25" = "CD25 high  ", "PTK7" = "PTK7 high  ")

for(cell_type in names(cells_df_list)) {
  cells_df <- cells_df_list[[cell_type]]
  cells_df_qnormed <- cells_df_qnormed_list[[cell_type]]
  
  for(feature in threshold_selected_features) {
    cells_df_qnormed[[paste0(feature, "_high")]] <- cells_df_qnormed[[feature]] > thresholds_coef[[cell_type]][[feature]]
    
    print(rasterize(ggplot(cells_df_qnormed %>% arrange_(paste0(feature, "_high")), aes_string(x = "UMAP1", y = "UMAP2", color = paste0(feature, "_high"))) + 
        geom_point_rast(size = 0.01) +
        ggtitle(paste(cell_type, "Naive cells UMAP with high", feature, "cells selected")) +
        labs(color = legend_titles[[feature]]) + 
        theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
              panel.background = element_blank(), axis.line = element_line(colour = "black"), 
              text = element_text(size = 20)) + guides(color = guide_legend(override.aes = list(size = 5))), layers='Point', dpi=150))
  }
  
  cells_df$cell_subtype <- factor(cells_df$cell_subtype, levels = c(paste0(join_selected_features, "+"), "Mature"))
  cells_df_qnormed$cell_subtype <- factor(cells_df_qnormed$cell_subtype, levels = c(paste0(join_selected_features, "+"), "Mature"))
  
  print(rasterize(ggplot(cells_df_qnormed %>% arrange(desc(cell_subtype)), aes(x = UMAP1, y = UMAP2, color = cell_subtype)) + 
        geom_point_rast(size = 0.01) +
        ggtitle(paste(cell_type, "Naive cells UMAP with selected markers")) +
        labs(color = "Cell subtype") + 
        scale_color_manual(values = c("#9B7A01", "#AA336A", "#023020", "#d3d3d3")) +
        theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
              panel.background = element_blank(), axis.line = element_line(colour = "black"), 
              text = element_text(size = 20)) + guides(color = guide_legend(override.aes = list(size = 5))), layers='Point', dpi=150))
  
  cells_df_list[[cell_type]] <- cells_df
  cells_df_qnormed_list[[cell_type]] <- cells_df_qnormed
}
```

## Boxplots and statplots for cells subtypes creation

```{r}
#| label: dunn-and-plot-functions

construct_dunn_test_table <- function(n_cells, feature, age_groups, subgroups_count, comparison_groups) {
  n_cells$age_group <- as.factor(n_cells$age_group)
  dunn_test_initial <- data.frame(Group1 = age_groups, Group2 = age_groups, P.adj = rep(Inf, length(age_groups)))
  formula <- as.formula(paste0("n_cells[['", feature, "']] ~ n_cells[['age_group']]"))
  dunn_test_result <- dunnTest(formula, data = n_cells, method="holm")$res
  dunn_test_result <- separate(dunn_test_result, "Comparison", c("Group1", "Group2"))[, c("Group1", "Group2", "P.adj")]
  dunn_test_result$P.adj <- pmin(dunn_test_result$P.adj * subgroups_count, 1)
  dunn_test_result <- rbind(dunn_test_result, dunn_test_initial)
  dunn_test_result$significance <- cut(unlist(dunn_test_result$P.adj), c(0, 0.001, 0.01, 0.05, 1, Inf), c("***","**","*","ns", ""))
  
  dunn_test_result
}

box_plot_creation <- function(n_cells, feature, stat.test, title, s_cols_grad) {
  ggplot(n_cells, aes_string(x = "age_group", y = feature)) + 
    geom_boxplot(outlier.size = 1.5,aes(fill=age_group), width=0.5) + 
    geom_point(shape=21, size =1.5 , aes(fill=age_group)) + 
    scale_fill_manual(values = s_cols_grad) +
    stat_pvalue_manual(data = stat.test, label = "p.adj", xmin = "group1", xmax = "group2", y.position = "y.position") +
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(), panel.background = element_blank(), 
          axis.line = element_line(colour = "black"), plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
          axis.text.x=element_text(size=12, colour = "black"), 
          axis.title.x = element_text(size = 10),
          axis.title.y = element_text(size = 10),
          axis.text.y=element_text(size=12, colour = "black"), 
          strip.text = element_text(size=11)) + 
    ylab(title) + xlab("Age group")
}

stat_plot_creation <- function(dunn_test_result, title) {
  ggplot(dunn_test_result, aes(x = Group2, y = Group1)) + 
      geom_raster(aes(fill = significance)) +
      labs(x = "Age group", y = "Age group", title = title) +
      theme_bw() + scale_fill_manual(values =  stat_fill) +
      geom_text(aes(label=significance), size = 5) + 
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
            axis.line = element_line(colour = "black"), plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
            axis.text.x=element_text(size=12, colour = "black"), axis.title.x = element_text(size = 12),
            axis.title.y = element_text(size = 12), axis.text.y=element_text(size=12, colour = "black"),
            strip.text = element_text(size=11))
}
```

```{r fig.height=6, fig.width=10}
#| label: boxplots-and-statplots
#| lightbox:
#|   group: boxplots-and-statplots

column_names <- c('naive_percent', 'CxCR3+', 'CD38+', 'CD25+', 'PTK7+', 'Mature')
stat_fill <- c("#d2228e","#d46dac","#ed90c9","#6dbbd4","white")
names(stat_fill) = c("***","**","*","ns", "")
age_groups <- unique(donors_info$age_group)

for(cell_type in names(cells_df_list)) {
  names <- c(paste('%', cell_type, 'Naive from', cell_type, 'T cells'), paste('%', cell_type, 'CxCR3+ from', cell_type, 'Naive'), paste('%', cell_type, 'CD38+ from', cell_type, 'Naive'), paste('%', cell_type, 'CD25+ from', cell_type, 'Naive'), paste('%', cell_type, 'PTK7+ from', cell_type, 'Naive'), paste('%', cell_type, 'Mature from', cell_type, 'Naive'))
  
  cells_df <- cells_df_list[[cell_type]]
  cells_df$age_group <- unlist(age_group_map[str_replace(str_replace(cells_df$sample_id, ".*-", ""), "\\d+", "")])
  
  n_cells_naive <- cells_df %>%
        group_by(sample_id) %>%
        dplyr::mutate(total_naive = n()) %>%
          dplyr::select(sample_id, age_group, total_naive) %>%
        distinct()
  
  n_cells_naive <- as.data.frame(n_cells_naive)
  rownames(n_cells_naive) <- n_cells_naive$sample_id
  n_cells_naive <- n_cells_naive[-1]
  
  n_cells_with_memory <- n_cells_all_cells_list[[cell_type]]
  n_cells_with_memory <- as.data.frame(n_cells_with_memory)
  rownames(n_cells_with_memory) <- n_cells_with_memory$sample_id
  n_cells_with_memory <- n_cells_with_memory[-1]
  
  n_cells_naive_and_all <- merge(n_cells_with_memory, n_cells_naive["total_naive"], by="row.names", all.x = TRUE)
  rownames(n_cells_naive_and_all) <- n_cells_naive_and_all$Row.names
  n_cells_naive_and_all <- n_cells_naive_and_all[-1]
  n_cells_naive_and_all[is.na(n_cells_naive_and_all$total_naive),"total_naive"] <- 0
  n_cells_naive_and_all$naive_percent <- n_cells_naive_and_all$total_naive / n_cells_naive_and_all$total_cells * 100.0

  box_plots <- list()
  stat_plots <- list()
  
  comparison_groups <- c("A", "E")
  dunn_test_result <- construct_dunn_test_table(n_cells_naive_and_all, 'naive_percent', age_groups, 1, comparison_groups)
  stat_for_boxplot <- dunn_test_result[dunn_test_result$Group1 %in% comparison_groups & dunn_test_result$Group2 %in% comparison_groups & dunn_test_result$Group1 != dunn_test_result$Group2, ]$P.adj
  
  stat_test <- data.frame(group1 = "A", group2 = "E", p.adj = cut(unlist(stat_for_boxplot), c(0, 0.001, 0.01, 0.05, 1, Inf), c("***","**","*","ns", "")), y.position = max(n_cells_naive_and_all$naive_percent) * 1.1)
  
  box_plots[["main"]] <- box_plot_creation(n_cells_naive_and_all, "naive_percent", stat_test, paste("%", cell_type, "Naive in", cell_type, "T cells"), s_cols_grad)
    
  stat_plots[["main"]] <- stat_plot_creation(dunn_test_result, paste("%", cell_type, "Naive in", cell_type, "T cells"))
  
  box_stat_features <- c(paste0(join_selected_features, "+"), "PTK7+", "Mature")
  for(feature in box_stat_features) {
    feature_high_df <- data.frame()
    
    if(feature == "PTK7+") {
      feature_high_df <- cells_df[cells_df["PTK7"] > thresholds_coef[[cell_type]][["PTK7"]], ]
    } else {
      feature_high_df <- cells_df[cells_df$cell_subtype == feature,]
    }
      
    n_cells_feature_high <- feature_high_df %>%
          group_by(sample_id) %>%
          dplyr::mutate(total_feature_high = n()) %>%
            dplyr::select(sample_id, age_group, total_feature_high) %>%
          distinct()
    
    n_cells_feature_high <- as.data.frame(n_cells_feature_high)
    rownames(n_cells_feature_high) <- n_cells_feature_high$sample_id
    n_cells_feature_high <- n_cells_feature_high[-1]
    
    n_cells_feature_high_and_all <- merge(n_cells_naive, n_cells_feature_high["total_feature_high"], by="row.names", all.x = TRUE)
    
    n_cells_feature_high_and_all[is.na(n_cells_feature_high_and_all)] <- 0
    rownames(n_cells_feature_high_and_all) <- n_cells_feature_high_and_all$Row.names
    n_cells_feature_high_and_all <- n_cells_feature_high_and_all[-1]
    n_cells_feature_high_and_all$feature_high_percent <- n_cells_feature_high_and_all$total_feature_high / n_cells_feature_high_and_all$total_naive * 100.0

    dunn_test_result <- construct_dunn_test_table(n_cells_feature_high_and_all, 'feature_high_percent', age_groups, length(box_stat_features), comparison_groups)
    stat_for_boxplot <- dunn_test_result[dunn_test_result$Group1 %in% comparison_groups & dunn_test_result$Group2 %in% comparison_groups & dunn_test_result$Group1 != dunn_test_result$Group2, ]$P.adj
    
    stat_test <- data.frame(group1 = "A", group2 = "E", p.adj = cut(unlist(stat_for_boxplot), c(0, 0.001, 0.01, 0.05, 1, Inf), c("***","**","*","ns", "")), y.position = max(n_cells_feature_high_and_all$feature_high_percent) * 1.1)
    
    box_plots[[feature]] <- box_plot_creation(n_cells_feature_high_and_all, "feature_high_percent", stat_test, paste0("% ", cell_type, " Naive ", feature, " in ", cell_type, " Naive"), s_cols_grad)
    
    stat_plots[[feature]] <- stat_plot_creation(dunn_test_result, paste0("% ", cell_type, " Naive ", feature, " in ", cell_type, " Naive"))
  }
  
  print(ggarrange(box_plots$`main`, box_plots$`CxCR3+`, box_plots$`CD38+`, box_plots$`CD25+`, box_plots$`PTK7+`, box_plots$`Mature`, ncol = 3, nrow = 2))
  
  print(ggarrange(stat_plots$`main`, stat_plots$`CxCR3+`, stat_plots$`CD38+`, stat_plots$`CD25+`, stat_plots$`PTK7+`, stat_plots$`Mature`, ncol = 3, nrow = 2))
}
```
